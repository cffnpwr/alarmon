name: Release

on:
  push:
    tags:
      - 'alarmon-v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MISE_OVERRIDE_CONFIG_FILENAMES: "mise.ci-base.toml"
  CARGO_TERM_COLOR: always

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    if: contains(github.ref, 'refs/tags/alarmon-v')
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          # git-cliffのインストール
          GITCLIFF_VERSION=$(curl -s https://api.github.com/repos/orhun/git-cliff/releases/latest | jq -r '.tag_name')
          wget -qO- "https://github.com/orhun/git-cliff/releases/download/${GITCLIFF_VERSION}/git-cliff-${GITCLIFF_VERSION#v}-x86_64-unknown-linux-gnu.tar.gz" | tar -xzf -
          sudo mv "git-cliff-${GITCLIFF_VERSION#v}/git-cliff" /usr/local/bin/

      - name: Download PR body artifact
        uses: actions/download-artifact@v4
        with:
          name: alarmon-release-note
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.run_id }}
        continue-on-error: true

      - name: Extract version from tag
        id: version
        run: |
          # タグからバージョンを抽出
          TAG_NAME=${GITHUB_REF#refs/tags/}
          ALARMON_VERSION=${TAG_NAME#alarmon-v}
          echo "version=$ALARMON_VERSION" >> $GITHUB_OUTPUT

  build:
    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: prepare-release
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            os: macos-14
          - target: x86_64-apple-darwin
            os: macos-13
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-musl
            os: ubuntu-24.04-arm
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Homebrew packages
        if: runner.os == 'macOS'
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
          key: ${{ runner.os }}-brew-${{ hashFiles('.github/workflows/release.yaml') }}
          restore-keys: |
            ${{ runner.os }}-brew-

      - name: Cache apt packages
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/release.yaml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install libpcap

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          # Determine architecture-specific settings
          if [[ "${{ runner.arch }}" == "X64" ]]; then
            MOLD_ARCH="x86_64"
            EXTRA_PACKAGES=""
          elif [[ "${{ runner.arch }}" == "ARM64" ]]; then
            MOLD_ARCH="aarch64"
            EXTRA_PACKAGES="musl-dev gcc-aarch64-linux-gnu"
          fi
          
          # Install common packages
          sudo apt-get -qq update
          sudo apt-get -qq install -y --no-install-recommends musl-tools linux-libc-dev libpcap-dev autoconf automake libtool ${EXTRA_PACKAGES}
          
          # Install latest mold from GitHub releases
          MOLD_VERSION=$(curl -s https://api.github.com/repos/rui314/mold/releases/latest | jq -r '.tag_name')
          wget -qO- "https://github.com/rui314/mold/releases/download/${MOLD_VERSION}/mold-${MOLD_VERSION#v}-${MOLD_ARCH}-linux.tar.gz" | sudo tar -xzf - -C /usr/local --strip-components=1

      - name: Install mise
        uses: jdx/mise-action@v2

      - name: Install tools with mise
        run: |
          mise trust
          mise install

      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build libpcap for musl (Linux)
        if: contains(matrix.target, 'musl')
        run: |
          # Determine architecture-specific settings
          if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
            ARCH_HOST="x86_64-linux-musl"
            ARCH_GNU="x86_64-linux-gnu"
          elif [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            ARCH_HOST="aarch64-linux-musl"
            ARCH_GNU="aarch64-linux-gnu"
          fi
          
          # Download and build libpcap for musl
          wget -O libpcap-1.10.5.tar.gz https://github.com/the-tcpdump-group/libpcap/archive/libpcap-1.10.5.tar.gz
          tar -xzf libpcap-1.10.5.tar.gz
          cd libpcap-libpcap-1.10.5
          
          # Create symlinks for musl headers
          sudo mkdir -p /usr/include/${ARCH_HOST}
          sudo ln -sf /usr/include/linux /usr/include/${ARCH_HOST}/linux
          sudo ln -sf /usr/include/asm-generic /usr/include/${ARCH_HOST}/asm-generic
          sudo ln -sf /usr/include/${ARCH_GNU}/asm /usr/include/${ARCH_HOST}/asm
          
          # Generate configure script and build
          ./autogen.sh
          CC=musl-gcc CFLAGS="-I/usr/include -I/usr/include/${ARCH_GNU}" ./configure --host=${ARCH_HOST} --prefix=/tmp/musl --disable-shared --disable-rdma --disable-bluetooth --disable-usb --disable-netmap --disable-dbus --with-pcap=linux
          make -j$(nproc) && make install

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build binary
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            # macOS build (no mold)
            cargo build --release --target ${{ matrix.target }}
          elif [[ "${{ matrix.target }}" == *"musl"* ]]; then
            # Linux musl build (static)
            RUSTFLAGS="-C target-feature=+crt-static -C link-arg=-fuse-ld=mold" \
            PKG_CONFIG_ALLOW_CROSS=1 \
            LIBPCAP_LIBDIR="/tmp/musl/lib" \
            PKG_CONFIG_PATH="/tmp/musl/lib/pkgconfig" \
            cargo build --release --target ${{ matrix.target }}
          else
            # Linux glibc build (dynamic)
            RUSTFLAGS="-C link-arg=-fuse-ld=mold" \
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-binary
          path: target/${{ matrix.target }}/release/alarmon

  create-universal:
    name: Create Universal Binary
    runs-on: macos-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download arm64 binary
        uses: actions/download-artifact@v4
        with:
          name: aarch64-apple-darwin-binary
          path: binaries/arm64/

      - name: Download amd64 binary
        uses: actions/download-artifact@v4
        with:
          name: x86_64-apple-darwin-binary
          path: binaries/amd64/

      - name: Create Universal Binary
        run: |
          mkdir -p binaries/universal
          lipo -create -output binaries/universal/alarmon \
            binaries/arm64/alarmon \
            binaries/amd64/alarmon

      - name: Verify Universal Binary
        run: |
          lipo -info binaries/universal/alarmon
          file binaries/universal/alarmon

      - name: Upload Universal Binary
        uses: actions/upload-artifact@v4
        with:
          name: universal-binary
          path: binaries/universal/alarmon

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build, create-universal]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          pattern: "*-binary"
          merge-multiple: false

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

          # git-cliffのインストール
          GITCLIFF_VERSION=$(curl -s https://api.github.com/repos/orhun/git-cliff/releases/latest | jq -r '.tag_name')
          wget -qO- "https://github.com/orhun/git-cliff/releases/download/${GITCLIFF_VERSION}/git-cliff-${GITCLIFF_VERSION#v}-x86_64-unknown-linux-gnu.tar.gz" | tar -xzf -
          sudo mv "git-cliff-${GITCLIFF_VERSION#v}/git-cliff" /usr/local/bin/


      - name: Create release artifacts
        run: |
          # alarmonクレートのバージョンを取得
          ALARMON_VERSION='${{ needs.prepare-release.outputs.version }}'

          # アーティファクトディレクトリを作成
          mkdir -p artifacts

          # ダウンロードされたバイナリディレクトリから各アーティファクトを作成
          for binary_dir in *-binary; do
            # バイナリディレクトリ名から target を抽出（例：aarch64-apple-darwin-binary → aarch64-apple-darwin）
            target="${binary_dir%-binary}"
            
            mkdir -p "tmp/${target}"
            cp "${binary_dir}/alarmon" "tmp/${target}/"
            cp README.md LICENSE "tmp/${target}/"
            tar -czf "artifacts/alarmon-v${ALARMON_VERSION}-${target}.tar.gz" -C "tmp/${target}" .
          done

          # チェックサム生成
          cd artifacts
          shasum -a 256 *.tar.gz > checksums.txt
          cd ..

      - name: Generate CHANGELOG
        run: |
          # 現在のタグを取得
          CURRENT_TAG=${GITHUB_REF#refs/tags/}

          # 前回のalarmonタグを取得
          PREVIOUS_TAG=$(git tag -l "alarmon-v*" | grep -v "^${CURRENT_TAG}$" | sort -V | tail -1 || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            # 前回のタグから今回までの変更を生成
            git-cliff --config cliff.toml --tag-pattern "alarmon-v.*" --current > CHANGELOG.md
          else
            # 初回リリースの場合
            git-cliff --config cliff.toml --tag-pattern "alarmon-v.*" --unreleased > CHANGELOG.md
          fi

      - name: Create release notes
        run: |
          # PRから収集したリリースノートを読み込み
          PR_RELEASE_NOTES=""
          if [ -f "*-release-note.md" ]; then
            PR_RELEASE_NOTES=$(cat *-release-note.md)
          fi

          # CHANGELOGを読み込み
          CHANGELOG=""
          if [ -f "CHANGELOG.md" ]; then
            CHANGELOG=$(cat CHANGELOG.md)
          fi

          # バージョン情報を取得
          ALARMON_VERSION='${{ needs.prepare-release.outputs.version }}'

          # リリースノートを生成
          {
            echo "# Release alarmon v${ALARMON_VERSION}"
            echo ""

            if [ -n "$PR_RELEASE_NOTES" ]; then
              echo "## Release note"
              echo "$PR_RELEASE_NOTES"
              echo ""
            fi

            if [ -n "$CHANGELOG" ]; then
              echo "## CHANGELOG"
              echo "$CHANGELOG"
              echo ""
            fi
          } > release-notes-final.md

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # バージョン情報を取得
          ALARMON_VERSION='${{ needs.prepare-release.outputs.version }}'

          # GitHubリリースを作成
          gh release create "alarmon-v${ALARMON_VERSION}" \
            --title "alarmon v${ALARMON_VERSION}" \
            --notes-file release-notes-final.md \
            artifacts/*
