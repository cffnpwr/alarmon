# git-cliff configuration file
[changelog]
# changelog header
header = """
# Changelog

すべての主要な変更はこのファイルに記録されます。

このプロジェクトは[Semantic Versioning](https://semver.org/lang/ja/)に準拠しています。

"""

# template for the changelog body
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}**{{ commit.scope }}**: {% endif %}{{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\

"""

# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""

# remove the leading and trailing whitespace from the template
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true

# filter out the commits that are not conventional
filter_unconventional = true

# process each line of a commit as an individual commit
split_commits = false

# regex for preprocessing the commit messages
commit_preprocessors = [
  # remove issue numbers from commits
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = ""},
  # remove PR numbers from commits
  { pattern = '\(#([0-9]+)\)', replace = ""},
  # Clean up common patterns
  { pattern = '^\[(\w+)\]\s*', replace = ""},
  # Remove extra whitespace
  { pattern = '\s+', replace = " "},
]

# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "新機能"},
  { message = "^fix", group = "バグ修正"},
  { message = "^doc", group = "ドキュメント"},
  { message = "^docs", group = "ドキュメント"},
  { message = "^perf", group = "パフォーマンス"},
  { message = "^refactor", group = "リファクタリング"},
  { message = "^style", group = "スタイル"},
  { message = "^test", group = "テスト"},
  { message = "^chore\\(release\\):", skip = true},
  { message = "^chore\\(deps\\)", skip = true},
  { message = "^chore\\(pr\\)", skip = true},
  { message = "^chore\\(pull\\)", skip = true},
  { message = "^chore|^ci", group = "その他"},
  { message = "^build", group = "ビルド"},
  { message = "^revert", group = "リバート"},
  # Custom patterns for this project
  { message = "^bump", group = "バージョン更新"},
  { message = "^release", group = "リリース"},
  { message = "^init", group = "初期化"},
  { message = "^add", group = "追加"},
  { message = "^update", group = "更新"},
  { message = "^remove", group = "削除"},
  { message = "^improve", group = "改善"},
  { message = "^enhance", group = "拡張"},
  { message = "^change", group = "変更"},
  { message = "^move", group = "移動"},
  { message = "^rename", group = "名前変更"},
  { message = "^clean", group = "クリーンアップ"},
  { message = "^format", group = "フォーマット"},
  { message = "^optimize", group = "最適化"},
  { message = "^security", group = "セキュリティ"},
  { message = "^deprecate", group = "非推奨"},
  { message = "^break", group = "破壊的変更"},
  { message = "^breaking", group = "破壊的変更"},
  { message = "^config", group = "設定"},
  { message = "^deps", group = "依存関係"},
  { message = "^merge", skip = true},
  { message = "^Merge", skip = true},
]

# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false

# filter out the commits that are not matched by commit parsers
filter_commits = false

# glob pattern for matching git tags
tag_pattern = "alarmon-v[0-9]*"

# regex for skipping tags
skip_tags = "pcap-v.*|tcpip-v.*"

# regex for ignoring tags
ignore_tags = ""

# sort the tags topologically
topo_order = false

# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"

# limit the number of commits included in the changelog.
# limit_commits = 42